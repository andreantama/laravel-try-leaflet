import { Circle } from 'leaflet';
import { CircleMarker } from 'leaflet';
import { CircleMarkerOptions } from 'leaflet';
import { LatLngBoundsExpression } from 'leaflet';
import { LatLngExpression } from 'leaflet';
import { Layer } from 'leaflet';
import { LineString } from 'geojson';
import { MultiLineString } from 'geojson';
import { Path } from 'leaflet';
import { PathOptions } from 'leaflet';
import { Polygon } from 'leaflet';
import { Polyline } from 'leaflet';
import { PolylineOptions } from 'leaflet';
import { Rectangle } from 'leaflet';
import { Renderer } from 'leaflet';

export declare const BRIGHT_OUTLINE_COLOR = "#000000";

export declare const BRIGHT_OUTLINE_WEIGHT_REDUCTION_FACTOR = 1.6;

export declare function clone<T>(obj: T): T;

export declare function createHighlightableLayerClass<B extends new (...args: any[]) => Path, T extends InstanceType<B>, O extends PathOptions>(BaseClass: B, createLayer: (mainLayer: HighlightableLayer<T, O>) => InstanceType<B>, cloneMethods?: Array<keyof T>, defaultOptions?: HighlightableLayerOptions<O>): new (arg1: ConstructorParameters<B>[0], options?: HighlightableLayerOptions<O>) => HighlightableLayer<T, O>;

export declare const DARK_OUTLINE_COLOR = "#ffffff";

export declare function generatePolygonStyles(options: HighlightableLayerOptions<PathOptions>, renderer: Renderer): Record<string, PathOptions>;

export declare function generatePolylineStyles(options: HighlightableLayerOptions<PathOptions>, renderer: Renderer): Record<string, PathOptions>;

export declare function getBrightness(colour: string): number;

export declare const HighlightableCircle: new (arg1: LatLngExpression, options?: HighlightableLayerOptions<CircleMarkerOptions> | undefined) => HighlightableLayer<Circle<any>, CircleMarkerOptions>;

export declare const HighlightableCircleMarker: new (arg1: LatLngExpression, options?: HighlightableLayerOptions<CircleMarkerOptions> | undefined) => HighlightableLayer<CircleMarker<any>, CircleMarkerOptions>;

export declare type HighlightableLayer<T extends Path, O extends PathOptions> = T & {
    realOptions: HighlightableLayerOptions<O>;
    layers: Record<string, T>;
    generateStyles(options: HighlightableLayerOptions<O>, renderer: Renderer): Record<string, O>;
    setStyle(style: Partial<HighlightableLayerOptions<O>>): HighlightableLayer<T, O>;
};

export declare type HighlightableLayerOptions<O extends PathOptions> = O & {
    raised?: boolean;
    outlineColor?: string;
    outlineWeight?: number;
    generateStyles?: (options: HighlightableLayerOptions<O>, renderer: Renderer) => Record<string, O>;
};

export declare const HighlightablePolygon: new (arg1: LatLngExpression[] | LatLngExpression[][] | LatLngExpression[][][], options?: HighlightableLayerOptions<PolylineOptions> | undefined) => HighlightableLayer<Polygon<any>, PolylineOptions>;

export declare const HighlightablePolyline: new (arg1: LatLngExpression[] | LatLngExpression[][], options?: HighlightableLayerOptions<PolylineOptions> | undefined) => HighlightableLayer<Polyline<LineString | MultiLineString, any>, PolylineOptions>;

export declare const HighlightableRectangle: new (arg1: LatLngBoundsExpression, options?: HighlightableLayerOptions<PolylineOptions> | undefined) => HighlightableLayer<Rectangle<any>, PolylineOptions>;

export declare function isBright(color: string): boolean;

export declare const OUTLINE_WEIGHT_FACTOR = 2;

export declare const POLYLINE_MIN_INTERACTION_WIDTH = 20;

export declare function setLayerPane(layer: Layer, pane: string): void;

export declare function setLayerRenderer(layer: Path, renderer: Renderer): void;

export { }


declare module "leaflet" {
    interface Map {
        _createRenderer: (options?: RendererOptions) => Renderer;
    }
    interface Layer {
        options: LayerOptions;
    }
    interface Path {
        _renderer?: Renderer;
        _reset(): void;
        _path: SVGElement;
        _updateBounds(): void;
    }
    interface Renderer extends Layer {
        _container: HTMLElement;
        _initPath(layer: Path): void;
        _addPath(layer: Path): void;
        _removePath(layer: Path): void;
        _updateStyle(layer: Path): void;
        _layers: Record<number, Path>;
    }
    interface Polyline {
        _rawPxBounds?: Bounds;
    }
}

